


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Lab-02b",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>ShopV2.0 (primitive array) 路 ShopV2.1 (methods operating on arrays) 路 ShopV2.2 (console menu system)</p>",
  "folder" : "book-2-shop-v2.x",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "Objectives",
    "shortTitle": "Lab-02b",
    "contentMd" : "#Objectives\r\n\r\nShopV2.0 (primitive array) 路 ShopV2.1 (methods operating on arrays) 路 ShopV2.2 (console menu system) "
    },
  
    {
    "title": "ShopV2.0",
    "shortTitle": "ShopV2.0",
    "contentMd" : "#ShopV2.0\r\n\r\nThis console based app will ask the user how many products they would like to enter.  When prompted, they will input the details for each of the products.  When finished the data entry, the product details will be printed on the console.\r\n\r\nDuring this step, you may need to view this weeks lecture notes to remind you how to use Arrays.\r\n\r\nIn IntelliJ, create a new Java Project called ShopV2.0.\r\n\r\nCopy the Product and Driver classes from ShopV1.0 and paste them into ShopV2.0.  Note: solution to ShopV1.0 is [here](./archives/ShopV1.0.zip).\r\n\r\nCreate a new class in the ShopV2.0 project called Store.  \r\n\r\nYour folder structure should look like this:\r\n\r\n![ShopV2.0 folder structure](./img/01.PNG)\r\n\r\n\r\n##Product Class\r\n\r\nThere are no changes required in this class.\r\n\r\n\r\n##Store Class\r\n\r\nIn the Store class, create two private instance fields:\r\n\r\n- products; an array of Products\r\n\r\n- total; an int representing the number of products currently in the array and also the next available index number in the array.\r\n\r\n\r\nWrite a constructor for this class that takes one parameter (numberItems).  This parameter will be used to set the size of the array of Products.  The total field is initialised to zero.\r\n\r\nWrite a private method called **isFull** that takes no parameters.  This method should return true if the value of the **total** field is equal to the length of the **products** array, false otherwise.\r\n\r\nWrite a private method called **isEmpty** that takes no parameters.  This method should return true if the value of the **total** field is zero, false otherwise.\r\n\r\nWrite an **add** method that takes one parameter (an Object of type Product) and returns a boolean value.  This method tests the boolean value returned from the **isFull()** method. If:\r\n\r\n- true is returned then the add method should return a value of false i.e. the array is full, so we could not add a product.\r\n\r\n- false is returned, then add the product object that was passed as a parameter to the products array using the **total** field as the index location.  Increment the **total** field by 1.  return true, indicating that the product was successfully added to the array.\r\n\r\n\r\nWrite a **listProducts** method that takes no parameter and returns a String value.  This method tests the boolean value returned from the **isEmpty()** method. If:\r\n\r\n- true is returned i.e. no products have been added, return the text \"No products\".\r\n\r\n- false is returned, use a for loop to cycle over the elements in the array, building a String of all products.  Return this string.\r\n\r\n\r\n##Driver Class\r\n\r\nWe will refactor this class to remove the Product instance field and replace it with an object of type Store.  We will also cater for entering and printing multiple products. \r\n\r\n- Delete the Product instance field and include a Store instance field instead. \r\n\r\n- Create a new method called **processOrder** that takes no parameters and has a void return type.  In this method, type in the following code:\r\n\r\n~~~\r\n    private void processOrder(){\r\n    \t//find out from the user how many products they would like to order\r\n    \tSystem.out.print(\"How many Products would you like to have in your Store?  \");\r\n    \tint numberProducts = input.nextInt();\r\n    \t\r\n    \tstore = new Store(numberProducts);\r\n\r\n    \t//ask the user for the details of the products and add them to the order\r\n    \tfor (int i = 0; i < numberProducts; i++){\r\n            addProduct();\r\n    \t}\r\n    }\r\n~~~\r\n\r\n- In your **addProduct()** method, change your code so that it looks like this (first and last line are changed):\r\n\r\n~~~\r\n    private void addProduct(){  \r\n        //dummy read of String to clear the buffer - bug in Scanner class.\r\n    \tinput.nextLine();\r\n    \tSystem.out.print(\"Enter the Product Name:  \");\r\n        String productName = input.nextLine();\r\n        System.out.print(\"Enter the Product Code:  \");\r\n        int productCode = input.nextInt();\r\n        System.out.print(\"Enter the Unit Cost:  \");\r\n        double unitCost = input.nextDouble();\r\n    \tSystem.out.print(\"Is this product in your current line (y/n): \");\r\n       \tchar currentProduct = input.next().charAt(0);\r\n    \tboolean inCurrentProductLine = false;\r\n    \tif ((currentProduct == 'y') || (currentProduct == 'Y'))\r\n    \t\tinCurrentProductLine = true;\r\n    \t\r\n        store.add(new Product(productName, productCode, unitCost, inCurrentProductLine));\r\n    }\r\n~~~\r\n\r\n- Note:  there is a bug in Scanner.  When you read an int and then do a String read, Scanner ignores the String read.  For this reason, you need to put in a \"dummy\" read of a String (i.e. input.nextLine() as the first line of code in the method).\r\n\r\n\r\n- In your **printProduct()** method, change the line of code to be:\r\n\r\n~~~\r\n    System.out.println(store.listProducts());\r\n~~~\r\n\r\n- In the **main** method, replace this line of code:\r\n\r\n~~~java\r\n   c.addProduct();\r\n~~~\r\n\r\nwith:\r\n\r\n~~~java\r\n   c.processOrder();\r\n~~~\r\n\r\n\r\n##Run the App\r\n\r\nRun the app; does all work as expected?  \r\n\r\n- Are you asked how many products you would like to enter?\r\n- Can you enter details for each product?\r\n- When finished the data entry, are the product details printed to the console?\r\n\r\n\r\n"
    },
  
    {
    "title": "ShopV2.1",
    "shortTitle": "ShopV2.1",
    "contentMd" : "#ShopV2.1\r\n\r\nIn IntelliJ, create a new project called **ShopV2.1**.\r\n\r\nCopy your completed ShopV2.0 java files (Driver, Store and Product) into this new project.  Alternatively, you can use our solution: [ShopV2.0](archives/ShopV2.0.zip).\r\n\r\nAdd a new method to the Store class for each piece of functionality listed below:\r\n\r\n- list the products that are in the current product line (testing the boolean variable here).\r\n\r\n- list the cheapest product entered.\r\n\r\n- list the average product price.\r\n\r\n- list the products above a specific price (read from the user and passed as a parameter).\r\n\r\n\r\nTo test these new methods, call them from the main method in your Driver class. \r\n\r\nYour output should look something like this:\r\n\r\n![](./img/02.PNG)\r\n\r\nSave your work.\r\n\r\n"
    },
  
    {
    "title": "ShopV2.2",
    "shortTitle": "ShopV2.2",
    "contentMd" : "#ShopV2.2\r\n\r\nIn IntelliJ, create a new project called **ShopV2.2**.\r\n\r\nCopy your completed ShopV2.1 java files (Driver, Store and Product) into this new project.  Alternatively, you can use our solution: [ShopV2.1](archives/ShopV2.1.zip).\r\n\r\nThere will be no changes in *Product* and *Store*.  All the changes below are in the *Driver* class.\r\n\r\nAdd the following new methods to your Driver class:\r\n\r\n~~~java\r\n    private int mainMenu(){\r\n        System.out.println(\"Shop Menu\");\r\n        System.out.println(\"---------\");\r\n        System.out.println(\"  1) List the Products\");\r\n        System.out.println(\"  2) List the current products\");\r\n        System.out.println(\"  3) Display average product unit cost\");\r\n        System.out.println(\"  4) Display cheapest product\");\r\n        System.out.println(\"  5) List products that are more expensive than a given price\");\r\n        System.out.println(\"  0) Exit\");\r\n        System.out.print(\"==>> \");\r\n        int option = input.nextInt();\r\n        return option;\r\n    }\r\n~~~\r\n\r\n~~~java\r\n    private void runMenu(){\r\n        int option = mainMenu();\r\n        while (option != 0){\r\n\r\n            switch (option){\r\n                case 1:    printProduct();\r\n                    break;\r\n                case 2:    printCurrentProducts();\r\n                    break;\r\n                case 3:    printAverageProductPrice();\r\n                    break;\r\n                case 4:    printCheapestProduct();\r\n                    break;\r\n                case 5:    printProductsAboveAPrice();\r\n                    break;\r\n                default:    System.out.println(\"Invalid option entered: \" + option);\r\n                    break;\r\n            }\r\n\r\n            //pause the program so that the user can read what we just printed to the terminal window\r\n            System.out.println(\"\\nPress any key to continue...\");\r\n            input.nextLine();\r\n            input.nextLine();  //this second read is required - bug in Scanner class; a String read is ignored straight after reading an int.\r\n\r\n            //display the main menu again\r\n            option = mainMenu();\r\n        }\r\n\r\n        //the user chose option 0, so exit the program\r\n        System.out.println(\"Exiting... bye\");\r\n        System.exit(0);\r\n    }\r\n~~~\r\n\r\nThe first method *mainMenu* displays the menu to the console and waits for the user to enter their choice (i.e. a number).  When they enter a number, it is returned from the method.\r\n\r\nThe second method *runMenu* controls the repeated display of the above menu and processes the actual option selected by the user.  When option 0 is entered, then this method closes down the program.\r\n\r\nNow change your *main* method to be this:\r\n\r\n~~~java\r\n   public static void main(String[] args) {\r\n        new Driver();\r\n    }\r\n~~~\r\n\r\nAnd add the following constructor:\r\n\r\n~~~java\r\n    public Driver() {\r\n        processOrder();\r\n        runMenu();\r\n    }\r\n~~~\r\n\r\n\r\n##Test the menu\r\n\r\nNow that you have the menu code in the Driver class, you are in a position to test it.  \r\n\r\nRun the Driver class and enter the details for, say, 3 products.  The menu should now be displayed and should look something like this:\r\n\r\n![](./img/03.PNG)\r\n\r\nTest each option and make sure that the output is what you expected.  Test an invalid option too (e.g. 9) and then test the exit option (0) last.\r\n\r\nSave your work\r\n"
    },
  
    {
    "title": "Solutions",
    "shortTitle": "Solutions",
    "contentMd" : "#Solutions\r\n\r\n[ShopV1.0](archives/ShopV1.0.zip)\r\n\r\n[ShopV2.0](archives/ShopV2.0.zip)\r\n\r\n[Exercise - ShopV2.1](archives/ShopV2.1.zip)\r\n\r\n[Exercise - ShopV2.2](archives/ShopV2.2.zip)\r\n"
    }
  
  ]
  }

