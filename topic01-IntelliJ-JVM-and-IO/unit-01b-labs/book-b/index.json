


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Lab-01b",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>IntelliJ · Java Virtual Machine (JVM) · main method · Scanner · OO recap</p>",
  "folder" : "book-b",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "Objectives",
    "shortTitle": "Lab-01b",
    "contentMd" : "#Objectives\r\n\r\nIntelliJ · Java Virtual Machine (JVM) · main method · Scanner · OO recap"
    },
  
    {
    "title": "Verifying IntelliJ Installation",
    "shortTitle": "HelloWorld",
    "contentMd" : "#Verifying IntelliJ Installation\r\n\r\nThe purpose of this step is to verify that your IntelliJ installation is working correctly.  Please do this step regardless of whether you are using the college computers or your own computer. \r\n\r\n\r\n##Launch IntelliJ\r\n\r\nLocate your IntelliJ application and start it (one easy way is to click on the search icon on your task bar and enter *IntelliJ*).\r\n\r\nIf this is your first time starting IntelliJ, you will probably be presented with a series options i.e. you might be:\r\n\r\n- asked if you want to import settings...you don't need to import any settings.  \r\n\r\n- presented with the User Licence Agreement...you will need to scroll to the bottom of this and accept it.\r\n\r\n- asked if you want to share anonymous data with Jetbrains (decide if you want to do this or not) and click the OK button.\r\n\r\n- asked to choose your default theme.  \r\n\r\n- presented with a series of tools that can be installed.  At the moment, we won’t be using them, so click on the button to **Skip Remaining and Set Defaults**.  \r\n\r\nIntelliJ should now startup.\r\n\r\n![](./img/ide12.PNG)\r\n\r\n\r\n##Creating your first Java Program\r\n\r\nClick **Create New Project**.\r\n\r\n![](./img/ide13.PNG)\r\n\r\nSomething similar to this window should appear:\r\n\r\n![](./img/ide14.PNG)\r\n\r\nIf your installation says that **No SDK** exists for the **Project SDK** (as ours does above), click on the **New..** button and locate version 10 of Java, for example:\r\n\r\n![](./img/ide15.PNG)\r\n\r\nNow that we have a valid Project SDK, click the **Next** button.  \r\n\r\nTick the box to create a project from a template.  Select **Java Hello World** and click the **Next** button.\r\n\r\n![](./img/ide15a.PNG)\r\n\r\nEnter the project name as **HelloWorld** and click **Finish**.\r\n\r\n![](./img/ide16.PNG)\r\n\r\nClose the **Tip** window when it appears.  \r\nA *Main* class, complete with the *main* method code is generated: \r\n\r\n![](./img/ide17.PNG)\r\n\r\n\r\n##Running your first Java Program\r\n\r\nThis program, when run, will print **Hello World!** into the console window.  \r\n\r\nTo run the program, click on the green triangle beside the main method.\r\nThen select *Run ‘Main.main()’*:\r\n\r\n![](./img/ide21.PNG)\r\n\r\n**Hello World!** should be printed to the console:\r\n\r\n![](./img/ide22.PNG)\r\n\r\nIf you are not getting this result, you should flag this to your lecturer who can help diagnose and resolve the issue.\r\n\r\n"
    },
  
    {
    "title": "ShopV1.0",
    "shortTitle": "ShopV1.0",
    "contentMd" : "#ShopV1.0\r\n\r\n- This console based app will ask the user to enter details for one Product.  The details of the product will be printed back to the user. \r\n\r\n- During this step, you may need to view this weeks lecture notes to remind you how to write classes.\r\n\r\n- In IntelliJ, create a new Java Project called **ShopV1.0** (don't use a template).\r\n\r\n\r\n##Creating Classes\r\n\r\nWithin the ShopV1.0 project, we will create two new classes, one called **Product** and the other called **Driver**.\r\n\r\nTo create a class called **Product**:\r\n\r\n- Right click on the *src* folder and select *New* followed by *Java Class*.\r\n\r\n![](./img/ide18.PNG)\r\n\r\n- When the dialog appears, enter **Product** as the class name.  You now should have an empty class like this:\r\n\r\n![](./img/ide19.PNG)\r\n\r\nRepeat this process to create a class called **Driver**.\r\n\r\nYour folder structure should look like this:\r\n\r\n![ShopV1.0 folder structure](./img/17.PNG)\r\n\r\n\r\n##Product Class\r\n\r\nIn the Product class, create four private instance fields:\r\n\r\n- productName of type String\r\n- productCode of type int\r\n- unitCost of type double\r\n- inCurrentProductLine of type boolean\r\n\r\nWrite a constructor for this class that takes the four instance fields as parameters and updates the object state using these parameters.  Note: no need for field validation yet.\r\n\r\nWrite a getter for each instance field.  \r\n\r\nWrite a setter for each instance field.  Note: no need for field validation yet.\r\n\r\nWrite a toString method that builds and returns a String comprising a user friendly representation of the object state.\r\n\r\n\r\n##Driver Class\r\n\r\nIn the Driver class, create two private instance fields:\r\n\r\n- input of type Scanner (initialise this field using **new Scanner(System.in)**) \r\n- product of type Product\r\n\r\nWrite a method called **addProduct()** that asks the user to input the details of the product (name, code, unit cost and whether or not it is in the current product line).  Use this data to create a new Product object i.e.\r\n\r\n~~~java\r\n        System.out.print(\"Enter the Product Name:  \");\r\n        String productName = input.nextLine();\r\n        System.out.print(\"Enter the Product Code:  \");\r\n        int productCode = input.nextInt();\r\n        System.out.print(\"Enter the Unit Cost:  \");\r\n        double unitCost = input.nextDouble();\r\n        System.out.print(\"Is this product in your current line (y/n): \");\r\n        char currentProduct = input.next().charAt(0);\r\n        boolean inCurrentProductLine = false;\r\n        if ((currentProduct == 'y') || (currentProduct == 'Y'))\r\n            inCurrentProductLine = true;\r\n        \r\n        product = new Product(productName, productCode, unitCost, inCurrentProductLine);\r\n~~~\r\n\r\nWrite a method called **printProduct()** that prints all the product to the console.  Hint: use the toString() method from the Product class.\r\n\r\nWrite a **main** method that has the following code:\r\n\r\n~~~java\r\n  public static void main(String[] args) {\r\n\t\tDriver c = new Driver();\r\n\t\tc.addProduct();\r\n\t\tc.printProduct();\r\n  }\r\n~~~\r\n\r\n\r\n##Run the App\r\n\r\nRun the app; does all work as expected?  Are you asked to enter the product details?  Are all details you entered printed back to the console?  \r\n\r\n\r\n"
    },
  
    {
    "title": "Exercise",
    "shortTitle": "Exercise",
    "contentMd" : "#Exercise\r\n\r\nThis exercise will help you become more familiar with the Scanner class.\r\n\r\n\r\n##What are you being asked to do?\r\n\r\nWrite a **single** class app that uses Scanner to ask the user to type in the value of an angle: \r\n![Input](./img/18.png)\r\n\r\nIf the angle is less than 90, print out acute angle, e.g.:\r\n![Acute Angle Output](./img/19.png)\r\n\r\nIf it is exactly 90, print out right angle, e.g.:\r\n![Right Angle Output](./img/20.png)\r\n\r\nIf it is more than 90 but less than 180, print out obtuse angle, e.g.:, \r\n![Obtuse Angle Output](./img/21.png)\r\n\r\nIf it is exactly 180, print out straight angle, e.g.:\r\n![Straight Angle Output](./img/22.png)\r\n\r\nIf it is otherwise, print out reflex angle, e.g.:\r\n![Right Angle Output](./img/23.png)\r\n\r\n\r\n##How do I code that?\r\n\r\nIn IntelliJ, create a new Java Project called **AngleProject**.\r\n\r\nCreate a class called **Angle**.    \r\n\r\nImport the Scanner class; recall that this must be the first line in your file.\r\n\r\nAdd a **main** method to the class and in this method:\r\n\r\n- Create an object of the Scanner class.\r\n\r\n- Ask the user to enter an angle and store it (you can determine the variable type from the screen shots above).\r\n\r\n- Call the **processAngle** method (defined below) passing, as the parameter, the angle value that you just read in.\r\n\r\n\r\n##processAngle method\r\n\r\nCreate a private method, with a void return type and call it **processAngle**.  It should accept one parameter of type **int**.\r\n\r\nThis method interrogates the parameter value and prints the type of angle it is to the screen (according to the screen shots above).\r\n\r\n\r\n##Run the App\r\n\r\nRun the app; does all work as expected?\r\n\r\n\r\n"
    },
  
    {
    "title": "Challenge",
    "shortTitle": "Challenge",
    "contentMd" : "#Challenge\r\n\r\nThis exercise will help you become more familiar with the Scanner class as well as working with a two class app.\r\n\r\nThis console based app will ask the user to enter their personal details.  Their details will then be printed back to the console. \r\n\r\nDuring this challenge, you may need to view this weeks lecture notes to remind you how to write classes.  The ShopV1.0 solution will also come in handy here.\r\n\r\n- In IntelliJ, create a new Java Project called **UserDetailsProject**.\r\n\r\n- Within this project, create two new Classes; **User** and **Driver**.\r\n\r\n\r\n##User Class\r\n\r\nIn the User class, create four private instance fields:\r\n\r\n- private String name;\r\n\r\n- private String address;\r\n\r\n- private String dateOfBirth;\r\n\r\n- private double height;\r\n\r\n\r\nWrite a constructor for this class that takes the four instance fields as parameters and updates the object state using these parameters.  Note: no need for field validation yet.\r\n\r\nWrite a getter for each instance field.  \r\n\r\nWrite a setter for each instance field.  Note: no need for field validation yet.\r\n\r\nWrite a toString method that builds and returns a String comprising a user friendly representation of the object state.\r\n\r\n\r\n##Driver Class\r\n\r\nIn the Driver class, create two private instance fields:\r\n\r\n- input of type Scanner (initialise this field using **new Scanner(System.in)**) \r\n- user of type User\r\n\r\nWrite a method called **addUser()** that asks the user to input their details (name, address, date of birth, height).  Use this data to create a new User object.\r\n\r\nWrite a method called **printUser()** that prints all the user details to the console.  Hint: use the toString() method from the User class.\r\n\r\nWrite a **main** method that creates an object of Driver and invokes both addUser and printUser over the object.\r\n\r\n\r\n##Run the App\r\n\r\nRun the app; does all work as expected?  Are you asked to enter the user details?  Are all details you entered printed back to the console?  \r\n\r\n![Sample Input](./img/24.png)\r\n\r\n![Sample Output](./img/25.png)\r\n\r\n\r\n"
    },
  
    {
    "title": "Solutions",
    "shortTitle": "Solutions",
    "contentMd" : "#Solutions\r\n\r\n[HelloWorld](archives/HelloWorld.zip)\r\n\r\n[ShopV1.0](archives/ShopV1.0.zip)\r\n\r\n[Exercise - AngleProject](archives/AngleProject.zip)\r\n\r\n[Challenge - UserDetailsProject](archives/UserDetailsProject.zip) \r\n\r\n"
    }
  
  ]
  }

