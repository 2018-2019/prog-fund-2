


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Lab-05",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>XML · Exception Handling · Validate User Input · ShopV5.0 · DVD3.0</p>",
  "folder" : "book-xml-exceptions",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "Objectives",
    "shortTitle": "Lab-05",
    "contentMd" : "#Objectives\r\n\r\nXML · Exception Handling · Validate User Input · ShopV5.0 · DVD3.0\r\n\r\n"
    },
  
    {
    "title": "Developing Shop V5.0 ",
    "shortTitle": "01",
    "contentMd" : "#Developing Shop V5.0 \r\n\r\nIn this practical, you will create a new project called ShopV5.0, based on ShopV4.0.  You will update the Driver, Store and Product classes (linked below) to enable the user to save the products to an XML file and also reload them (see Figure 1 for the updated menu system in ShopV5.0).\r\n\r\n![](./img/00.png) \r\n\r\n##Menu Items 9 and 10:  Saving and Loading Products\r\n\r\nIn IntelliJ, create a new project called ShopV5.0.\r\n\r\nCopy the following classes into the project:\r\n\r\n- [Driver.java](archives/Driver.java)\r\n\r\n- [Store.java](archives/Store.java)\r\n\r\n- [Product.java](archives/Product.java)\r\n\r\n\r\n##Setting up the Component for Serializing\r\n\r\nDownload the following XStream jar file from:\r\n\r\n- [xstream-1.4.10.jar](archives/xstream-1.4.10.jar) \r\n\r\n\r\nIn IntelliJ, on the ShopV5.0 project, right click and select **New**, followed by **Directory**.  Call the new directory **lib**.  Drag the xstream jar file already downloaded into the lib folder.\r\n\r\nYour workspace should look like this:\r\n\r\n![](img/xml01.png)\r\n\r\n\r\nFrom **File** menu, select **Project Structure**.  Click on **Libraries**.  To add a library to your build path, click on the green + : \r\n\r\n![](img/xml02.png)\r\n\r\nSelect Java and locate your library…click OK (a few times!).\r\n\r\n\r\n##Updating Store Class to serialize and deserialize products \r\n\r\nIn the Store class, create these two new methods:\r\n\r\n~~~java\r\n    @SuppressWarnings(\"unchecked\")\r\n    public void load() throws Exception\r\n    {\r\n        XStream xstream = new XStream(new DomDriver());\r\n        ObjectInputStream is = xstream.createObjectInputStream(new FileReader(\"products.xml\"));\r\n        products = (ArrayList<Product>) is.readObject();\r\n        is.close();\r\n    }\r\n    \r\n    public void save() throws Exception\r\n    {\r\n        XStream xstream = new XStream(new DomDriver());\r\n        ObjectOutputStream out = xstream.createObjectOutputStream(new FileWriter(\"products.xml\"));\r\n        out.writeObject(products);\r\n        out.close();    \r\n    }\r\n~~~\r\n\r\nYou will notice that they don't compile; they are missing some needed packages.  Import the following packages at the top of the store class (or use IntelliJ's ALT+Enter to automatically add them):\r\n\r\n~~~java\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.ObjectInputStream;\r\nimport java.io.ObjectOutputStream;\r\n\r\nimport com.thoughtworks.xstream.XStream;\r\nimport com.thoughtworks.xstream.io.xml.DomDriver;\r\n~~~\r\n\r\n\r\n##Adding load and save functionality to the menu\r\n\r\nIn the Driver class, add options 9 and 10 to the printed menu:\r\n\r\n![](./img/03.png) \r\n\r\nIn the Driver class, make the following changes to implement case 9 and 10: \r\n\r\n![](./img/04.png) \r\n\r\n\r\n##Testing the load and store\r\n\r\nYou should be in a position now to test.  \r\n\r\nStart your app and create two products e.g.\r\n\r\n~~~\r\nPlease enter the product description: 24 inch monitor\r\nPlease enter the product code: 3423\r\nPlease enter the product cost: 129.99\r\nIs this product in your current line (y/n): y\r\n\r\nPlease enter the product description: 14 inch monitor\r\nPlease enter the product code: 2322\r\nPlease enter the product cost: 109.99\r\nIs this product in your current line (y/n): y\r\n~~~\r\n\r\nNow try option 9 to save your products. **Note: if you are using java 9, 10 or 11 you are probably getting a series of red warning messages...the products will be saved, but they will still produce the warnings.  The next step will show you how to suppress these warnings**.  \r\n\r\nYou should now see a products.xml file appearing in the root of your project.  \r\n\r\nOpen this file and it should contain something similar to this:\r\n\r\n~~~xml\r\n<object-stream>\r\n  <list>\r\n    <Product>\r\n      <productName>24 inch monitor</productName>\r\n      <productCode>3423</productCode>\r\n      <unitCost>129.99</unitCost>\r\n      <inCurrentProductLine>true</inCurrentProductLine>\r\n    </Product>\r\n    <Product>\r\n      <productName>14 inch monitor</productName>\r\n      <productCode>2322</productCode>\r\n      <unitCost>109.99</unitCost>\r\n      <inCurrentProductLine>true</inCurrentProductLine>\r\n    </Product>\r\n  </list>\r\n</object-stream>\r\n~~~\r\n\r\n\r\nExit your application and run it again.\r\n\r\nTest option 10 and make sure that the saved products are loaded back into your products ArrayList correctly.\r\n\r\n\r\n"
    },
  
    {
    "title": "Java 9+ and XStream ",
    "shortTitle": "02",
    "contentMd" : "#Java 9+ and XStream \r\n\r\n*This step ONLY applies if you are using JDK9 or later.  If you are using JDK8 or lower, you can move onto the next step.*\r\n\r\nIf you are using JDK9 or later , you are more than likely getting the following warning when saving/loading your products:\r\n\r\n![](./img/error01.png)  \r\n\r\nHowever, your products.xml file will still be successfully saved and loaded; it is just a warning. \r\n\r\n\r\n##Getting rid of the warning\r\n\r\nWe can get rid of the warning by passing suppression messages to the VM when we run our application. To do this:\r\n\r\n- From the **Run** menu, select **Edit Configuratons...***\r\n\r\n- In the **VM Options** box, paste in the following VM arguments:\r\n\r\n~~~\r\n--add-opens java.base/java.util=ALL-UNNAMED \r\n--add-opens java.base/java.lang.reflect=ALL-UNNAMED \r\n--add-opens java.base/java.text=ALL-UNNAMED \r\n--add-opens java.desktop/java.awt.font=ALL-UNNAMED\r\n~~~\r\n\r\n- Click the **OK** button.  \r\n\r\n\r\n##Retesting\r\n\r\nRerun the app and try the save/load again...the warning message should now be suppresed.  You may get this one still, but you can ignore it:\r\n\r\n~~~\r\nSecurity framework of XStream not initialized, XStream is probably vulnerable.\r\n~~~\r\n\r\nNote that you will need to do this each time you create a new project, as the VM arguments will need to be updated.  However, if you copy/clone a project with it in it, the arguments will be retained. \r\n\r\n\r\n##A note on XStream and Java\r\n\r\nJava 9 was released in September 2017.\r\n\r\nJava 10 was released in March 2018.  \r\n\r\nJava 11 was released in September 2018.\r\n\r\nHowever, the latest version of XStream (1.4.10) was released in May 2017, before the Java 9 changes.  When a new version of XStream is released, we probably won't have to pass these parameters to the VM.\r\n\r\n\r\n"
    },
  
    {
    "title": "Shop V5.0 - Exceptions ",
    "shortTitle": "03",
    "contentMd" : "#Shop V5.0 - Exceptions \r\n\r\nIn this step, you will continue working on Shop V5.0. \r\n\r\n##Adding Exception Handling\r\n\r\nIn the Driver class, put a try and catch block around each potential read of data that could throw an exception (nextLine() and next() are ok).\r\n\r\nRevisit your lecture notes on this topic if you need guidance.\r\n\r\nRun your program and test your user input to ensure that your exception handling is correctly implemented e.g. enter String data when a double or int is expected.   \r\n\r\n##DRY code\r\n\r\nDid you notice that your code is not DRY (Don't Repeat Yourself)?  Did you notice that you were doing the same thing over and over and over again for each readInt and readDouble? e.g. this is the product code read, which is incredibly similiar to the read of an index, etc\r\n\r\n~~~java\r\n        int productCode = 0;\r\n        boolean goodInput = false; \t//Loop  Control Variable\r\n        do {\r\n            try {\r\n                System.out.print(\"Enter the product code: \");\r\n                productCode = input.nextInt();\r\n                goodInput = true;\r\n            }\r\n            catch (Exception e) {\r\n                input.nextLine();  //swallows Scanner bug\r\n                System.out.println(\"Num expected - you entered  text\");\r\n            }\r\n        }  while (!goodInput);\r\n~~~\r\n\r\nWe will now adopt a slightly different approach for reading in the int index number to delete/update from the user and also when reading in the double value in the method *printProductsAboveAPrice()*.\r\n\r\n\r\n##readNextInt(String prompt) \r\n\r\nIn the Driver, add this method that takes in a prompt (i.e. what you print to the user when asking them for data) and validates the input provided:\r\n\r\n~~~java\r\n    private int readNextInt(String prompt) {\r\n        do {\r\n            var scanner = new Scanner(System.in);\r\n            try {\r\n                System.out.print(prompt);\r\n                return Integer.parseInt(scanner.next());\r\n            }\r\n            catch (NumberFormatException e) {\r\n                System.err.println(\"\\tEnter a number please.\");\r\n            }\r\n        }  while (true);\r\n    }\r\n~~~\r\n\r\nThen use this method to read in a valid *int* in the *updateProduct* method (and also the *deleteProduct* method) e.g.:\r\n\r\n~~~java\r\n    private void updateProduct(){\r\n        //list the products\r\n        System.out.println(store.listProducts());\r\n\r\n        if (store.getProducts().size() > 0) {\r\n            //only ask the user to choose a product if products exist\r\n            int index = readNextInt(\"Enter the index of the product to update ==> \");\r\n\r\n            if ((index >= 0) && (index < store.getProducts().size())) {\r\n                //if the index is valid, gather new details for each field from the user\r\n\r\n                ///more code here\r\n~~~\r\n\r\nSave and rerun your app.  Test the update and delete code by entering a letter for the index number.  It should give you the error message \"Enter a number please\" and then allow you to enter a new number. \r\n\r\nOnce you are happy with your app, try to refactor other nextInt reads so that they use this method instead.  You are now moving towards having DRY code.\r\n\r\n\r\n##readNextDouble(String prompt) \r\n\r\nIn the Driver, now add this method that takes in a prompt (i.e. what you print to the user when asking them for data) and validates the input provided:\r\n\r\n~~~java\r\n    private double readNextDouble(String prompt) {\r\n        do {\r\n            var scanner = new Scanner(System.in);\r\n            try{\r\n                System.out.print(prompt);\r\n                return Double.parseDouble(scanner.next());\r\n            }\r\n            catch (NumberFormatException e) {\r\n                System.err.println(\"\\tEnter a number please.\");\r\n            }\r\n        }  while (true);\r\n    }\r\n~~~\r\n\r\nThen use the method here:\r\n\r\n~~~java\r\n    private void printProductsAboveAPrice() {\r\n        double price = readNextDouble(\"View the product costing more than this price:  \");\r\n        System.out.println(store.listProductsAboveAPrice(price));\r\n    }\r\n~~~\r\n\r\nSave and run your project and test these code changes.\r\n\r\nWhen you are happy that the code change is working as expected, try to refactor other nextDouble reads so that they use this method instead.  From the data validation perspective, you now have DRY code.\r\n\r\n\r\n##An interim solution\r\n\r\nAn interim solution to the ShopV5.0 exercise [is here](archives/ShopV5.0-interim.zip) should you need in.   \r\n\r\nIn the next step, we will use our new \"read\" methods to elimiate the annoying Scanner bug from our system.  This approach will also make our code much cleaner!\r\n\r\n "
    },
  
    {
    "title": "Shop V5.0 - Eliminating the Scanner Bug",
    "shortTitle": "04",
    "contentMd" : "#Shop V5.0 - Eliminating the Scanner Bug\r\n\r\nIn this step, you will continue working on Shop V5.0.  Should you need it, the interim solution [is here](archives/ShopV5.0-interim.zip).\r\n\r\nIn the previous step, we used two new \"read\" methods to repeatedly ask for valid *int* and *double* values.  You will notice that each method had it's own local Scanner object called *scanner*.\r\n\r\nDid you notice that these changes meant that we were pressing the enter key a lot to get, say, the menu to redisplay?\r\n\r\n\r\n##The Scanner Bug\r\n\r\nThere is a bug in the Java Scanner class - a String read is ignored straight after reading an int or a double.  \r\n\r\nWe previously catered for this bug in our code by adding a second *input.nextLine()* statement after reading an int or a double. \r\n\r\nAs each of the new \"read\" methods has its own local Scanner object called *scanner*, each call of this method will create a brand new scanner for reading every int and double --> this will eliminate the bug. \r\n\r\nHowever, we now have a lot of those extra *input.nextLine()* statements that are no longer required e.g. in the below code, we have two input.nextLine() statements - we only need to have one now.\r\n\r\n~~~java\r\n    private void runMenu() {\r\n        int option = mainMenu();\r\n        while (option != 0) {\r\n\r\n            //switch statements\r\n\r\n            //pause the program so that the user can read what we just printed to the terminal window\r\n            System.out.println(\"\\nPress any key to continue...\");\r\n            input.nextLine();\r\n            input.nextLine();  //this second read is required - bug in Scanner class; a String read is ignored straight after reading an int.\r\n\r\n            //display the main menu again\r\n            option = mainMenu();\r\n        }\r\n\r\n        //the user chose option 0, so exit the program\r\n        System.out.println(\"Exiting... bye\");\r\n        System.exit(0);\r\n    }\r\n\r\n~~~\r\n\r\nDelete the extra statement and any other extra read statements in your code.  \r\n\r\nRetest your app.  Everything should work as expected and you shouldn't unnecessarily have to press the enter key twice.\r\n\r\nShould you need it, the solution without the scanner bug [is here](archives/ShopV5.0-NoScannerBug.zip).\r\n\r\n"
    },
  
    {
    "title": "Shop V5.0 - Utility Class",
    "shortTitle": "05",
    "contentMd" : "#Shop V5.0 - Utility Class\r\n\r\nIn this step, you will continue working on Shop V5.0.  Should you need it, the solution without the scanner bug [is here](archives/ShopV5.0-NoScannerBug.zip).\r\n\r\nNow that we have eliminated the Scanner bug using these methods, we would like to make these easily available for all projects we develop:\r\n\r\n~~~java\r\n    private int readNextInt(String prompt) {\r\n        do {\r\n            var scanner = new Scanner(System.in);\r\n            try {\r\n                System.out.print(prompt);\r\n                return Integer.parseInt(scanner.next());\r\n            }\r\n            catch (NumberFormatException e) {\r\n                System.err.println(\"\\tEnter a number please.\");\r\n            }\r\n        }  while (true);\r\n    }\r\n\r\n    private double readNextDouble(String prompt) {\r\n        do {\r\n            var scanner = new Scanner(System.in);\r\n            try{\r\n                System.out.print(prompt);\r\n                return Double.parseDouble(scanner.next());\r\n            }\r\n            catch (NumberFormatException e) {\r\n                System.err.println(\"\\tEnter a number please.\");\r\n            }\r\n        }  while (true);\r\n    }\r\n\r\n~~~\r\n\r\n\r\n##Developing the ScannerInput utility class\r\n\r\nCreate a new class called **ScannerInput.java**.\r\n\r\nCut the two methods above from the Driver.java class and paste them into the new ScannerInput.java class.\r\n\r\nYou will notice that Driver.java no longer compiles as it cannot find/use the methods we moved to ScannerInput.java.\r\n\r\nTo fix this, first make the ScannerInput methods public and *static*.  You can do this by changing their method signatures like this:\r\n\r\n~~~java\r\npublic static int readNextInt(String prompt) {\r\npublic static double readNextDouble(String prompt) {     \r\n~~~ \r\n\r\n\r\n##Fixing Driver.java\r\n\r\nStatic means that we don't have to create an object of ScannerInput in order to use these methods...they belong at class level.  We can just call the methods using something like this:\r\n\r\n~~~java\r\nScannerInput.readNextInt(\"Enter the product code: \");\r\n~~~\r\n\r\nMake this change for all the readNextInt and readNextDouble.  Notice that IntelliJ, when you click on the non-compiling method will also suggest this fix (use Alt+Enter as the quick fix for each offending method).  \r\n\r\nRun your app again and make sure all is working as expected.\r\n\r\nNow you can copy this ScannerInput.java file into any project you create from here on in.  We will do that with the DVD app in the next step.\r\n\r\n\r\n##Solution\r\n\r\nShould you need it, the solution with the ScannerInput class [is here](archives/ShopV5.0.zip).\r\n\r\n"
    },
  
    {
    "title": "Menu Driven DVD Specification (Phase 3)",
    "shortTitle": "06",
    "contentMd" : "#Menu Driven DVD Specification (Phase 3)\r\n\r\nIn this practical, you will create a new project and copy in the code from **DVDLibraryV2.0**.  You will then extend the code to allow the user to save the DVDs to an XML file and to load the DVDs from an XML file.   We will also bring in our new ScannerInput file to prevent our app from crashing if the user enters invalid numeric data on the console.\r\n\r\n- Create a new project called **DVDLibraryV3.0**.\r\n\r\n- In your Windows Explorer / Mac Finder, copy the **src** java files from **DVDLibraryV2.0** to the **src** folder in your new project,  **DVDLibraryV3.0**.\r\n\r\n- NOTE:  a copy of the completed **DVDLibraryV2.0** [is available here should you need it](archives/DVDLibraryV2.0.zip).\r\n\r\n\r\n##Setting up the XML Component for Serializing\r\n\r\nDownload the following XStream jar file and incorporate it into your DVDLibraryV3.0 project:\r\n\r\n- [xstream-1.4.10.jar](../book/archives/xstream-1.4.10.jar) \r\n\r\n\r\n##Library class\r\n\r\nIn the Library class:\r\n\r\n- add a load() method that throws an Exception.  This method should read the contents of the dvd.xml file into the ArrayList of DVDs.\r\n\r\n- add a save() method that throws an Exception.  This method should write the contents of the ArrayList of DVDs to the dvd.xml file.\r\n\r\n\r\n##Driver class - Save DVDs\r\n\r\nAdd a fifth option to the menu:  *5) Save DVDs to dvds.xml.*\r\n\r\nAdd a case 5 to the switch statement.  Then, within a try and catch block, call the save() method you wrote in the Library class.\r\n\r\n\r\n##Driver class - Load DVDs\r\n\r\nAdd a sixth option to the menu:  *6) Load DVDs from dvds.xml.*\r\n\r\nAdd a case 6 to the switch statement.  Then, within a try and catch block, call the load() method you wrote in the Library class.\r\n\r\n\r\n## Test your code\r\n\r\nRun the project.\r\n\r\n- Test option 5 and make sure that your DVDs are stored to an XML file.  \r\n\r\n- You should have a new XML file that looks something like this:\r\n\r\n~~~XML\r\n<object-stream>\r\n  <list>\r\n    <DVD>\r\n      <title>The Matrix</title>\r\n    </DVD>\r\n    <DVD>\r\n      <title>Sicario</title>\r\n    </DVD>\r\n    <DVD>\r\n      <title>The Grinch</title>\r\n    </DVD>\r\n  </list>\r\n</object-stream>\r\n~~~\r\n\r\nExit your application and run it again.\r\n\r\n- Test option 6 and make sure that your DVDs are loaded back into your dvd ArrayList correctly.\r\n\r\n\r\n##ScannerInput\r\n\r\nThis app is only reading ints (at the moment) and no doubles.  \r\n\r\nHowever, it doesn't stop us using our new ScannerInput.java class - we are future proofing our app for when we will be reading doubles!\r\n\r\nCopy the *ScannerInput.java* class that you wrote in ShopV5.0 and paste it into your *src* folder of the DVDLibraryV3.0 app.  For your convenience, we have included it [here](archives/ScannerInput.java).\r\n\r\nEach time you read an *int* in the Driver class, replace it with a call to the ScannerInput method instead (just like you did with the Shop app) e.g.\r\n\r\nthis int read:\r\n\r\n~~~java\r\nSystem.out.print(\"Index of dvd to edit ==>\");\r\nint index = input.nextInt();\r\n~~~\r\n\r\nbecomes:\r\n\r\n~~~java\r\nint index = ScannerInput.readNextInt(\"Index of dvd to edit ==>\");\r\n~~~\r\n\r\nNow your program won't crash if you enter, say, a letter, when the app is expecting an int.\r\n\r\nDon't forget to remove any of those dummy reads (i.e. input.nextLine(); ) that we put in to cater for the Scanner bug.\r\n\r\nRerun and test your app to make sure all is ok.  Your app should be more robust now and shouldn't crash when invalid numeric data is entered.  \r\n\r\n"
    },
  
    {
    "title": "Solutions",
    "shortTitle": "Solutions",
    "contentMd" : "#Solutions\r\n\r\nThe interim solution to ShopV5.0 with the input execption handling [is here](archives/ShopV5.0-interim.zip).\r\n\r\nThe solution to ShopV5.0 without the scanner bug [is here](archives/ShopV5.0-NoScannerBug.zip).\r\n\r\nThe final solution to the ShopV5.0 with the ScannerInput utility class [is here](archives/ShopV5.0.zip).\r\n\r\nThe solution to DVD phase 3 [is here](archives/DVDLibraryV3.0.zip).\r\n\r\n\r\n"
    }
  
  ]
  }

