


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Lab-07",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>Social Network app · Inheritance · Polymorphism · Overriding</p>",
  "folder" : "book",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "Objectives",
    "shortTitle": "Lab-07",
    "contentMd" : "#Objectives\r\n\r\nSocial Network app · Inheritance · Polymorphism · Overriding"
    },
  
    {
    "title": "Network-V1",
    "shortTitle": "V1",
    "contentMd" : "#Network-V1\r\n\r\nIn this step, you will familiarise yourself with the original version of the Network example (without inheritance).\r\n\r\n\r\n##Creating Network V1 Project\r\n\r\nIn IntelliJ, create a new project called Network-V1.\r\n\r\nCopy the following classes into the project:\r\n\r\n- [MessagePost.java](archives/v1/MessagePost.java)\r\n\r\n- [NewsFeed.java](archives/v1/NewsFeed.java)\r\n\r\n- [PhotoPost.java](archives/v1/PhotoPost.java)\r\n\r\n\r\n##Testing the project\r\n\r\nIn the above project, create a new class called Test.  Copy the following code into it:\r\n\r\n- [Test.java](archives/v1/Test.java)\r\n\r\nThis class is a **test harness** and tests the three classes by performing the following actions:\r\n \r\n- Create 2 MessagePost objects.\r\n- Create 2 PhotoPosts objects.\r\n- Create 1 NewsFeed object.\r\n- Add 1 PhotoPost object to the NewsFeed object.\r\n- Add 1 MessagePost object to the NewsFeed object.\r\n- Add another PhotoPost object to the NewsFeed object.\r\n- Add another MessagePost object to the NewsFeed object.\r\n- List all messagePost and photoPosts from the NewsFeed object.\r\n\r\n\r\nRun this test class and interrogate the output. \r\n\r\nNote the order of the posts...figure out why the order is different than the\r\norder of input.\r\n\r\n![Output from Test.java](./img/00.png) \r\n\r\n\r\n##Moving onto the next version\r\n\r\nBefore moving onto v2, ensure that you:\r\n\r\n- understand the code in v1. \r\n\r\n- notice the code duplication and the problems that it could cause.\r\n\r\n\r\n##Solution\r\n\r\nThe solution to network-v1 is [here](archives/network-solution-v1.zip).\r\n\r\n"
    },
  
    {
    "title": "Network-V2",
    "shortTitle": "V2",
    "contentMd" : "#Network-V2\r\n\r\nIn this step, you will familiarise yourself with the second version of the Network example (with inheritance).  \r\n\r\n\r\n##Creating Network V2 Project\r\n\r\nIn IntelliJ, create a new project called Network-V2.\r\n\r\nCopy the following classes into the project:\r\n\r\n- [MessagePost.java](archives/v2/MessagePost.java)\r\n\r\n- [NewsFeed.java](archives/v2/NewsFeed.java)\r\n\r\n- [PhotoPost.java](archives/v2/PhotoPost.java)\r\n\r\n- [Post.java](archives/v2/Post.java)\r\n\r\n\r\n##Testing the project\r\n\r\nIn the above project, create a new class called Test.  Copy the following code into it:\r\n\r\n- [Test.java](archives/v2/Test.java)\r\n\r\nThis test class will repeat these steps that you did with v1:\r\n\r\n- Create 2 MessagePost objects.\r\n- Create 2 PhotoPosts objects.\r\n- Create 1 NewsFeed object.\r\n- Add 1 PhotoPost object to the NewsFeed object.\r\n- Add 1 MessagePost object to the NewsFeed object.\r\n- Add another PhotoPost object to the NewsFeed object.\r\n- Add another MessagePost object to the NewsFeed object.\r\n- List all messagePost and photoPosts from the NewsFeed object.\r\n\r\nNote the difference in the order (the details are now printed in the order they were entered).\r\n\r\n![](./img/01.png) \r\n\r\nNote that all the details associated with each post are not displayed when we \"List all posts\"?  Why do you think details are missing?  Note:  we will fix this later in the lab.\r\n\r\n\r\n##Solution\r\n\r\nThe solution to network-v2 is [here](archives/network-solution-v2.zip).\r\n\r\n"
    },
  
    {
    "title": "Network-V3",
    "shortTitle": "V3",
    "contentMd" : "#Network-V3\r\n\r\nIn this step, you will create version 3 of the Network system.  This version will have a menu that will control the NewsFeed class.\r\n\r\n\r\n##Creating Network V3 Project\r\n\r\nIn IntelliJ, create a new project called Network-V3.\r\n\r\nCopy the following classes into this new project (note they have the System.out.print statements removed from them and instead have returned the Strings).\r\n\r\n- [PhotoPost](archives/v3/PhotoPost.java)\r\n- [MessagePost](archives/v3/MessagePost.java)\r\n- [Post](archives/v3/Post.java)\r\n- [NewsFeed](archives/v3/NewsFeed.java)\r\n\r\nCreate a new class, called Driver.  This class will contain the main() method.  In this class:\r\n\r\n- write a private method, called mainMenu() that displays the following menu and returns the user's input.\r\n\r\n![](./img/main.png) \r\n\r\n- write a private method, called run().  This method should call the mainMenu() method and use a switch statment to process the user's input.  Hint: write a private method for each case i.e. one that creates a MessagePost, one that creates a PhotoPost and then one that adds to the posts collection.\r\n\r\n- The run() method should be called from the main method.   \r\n\r\n\r\n##Testing V3\r\n\r\nTest the program by doing the following:\r\n\r\n- Add 1 messagePost.\r\n- Add 1 photoPost.\r\n- Add another 1 messagePost.\r\n- Add another 1 photoPost.\r\n- List all posts.\r\n\r\n\r\nAre the posts printed in the order we entered them?\r\n\r\nAre all the details that we entered, displayed when we \"List all posts\"?  Why do you think details are missing?  Hint:  Investigate the code in Post, PhotoPost and MessagePost that displays the post.  *Note:  we will fix this is the next step.*\r\n\r\n\r\n##Solution\r\n\r\nThe solution to network-v3 is [here](archives/network-solution-v3.zip).\r\n\r\n"
    },
  
    {
    "title": "Network-V4",
    "shortTitle": "V4",
    "contentMd" : "#Network-V4\r\n\r\nIn this step, you will build on v3 that you wrote in the previous step.\r\n\r\n##Creating the Network-V4 project\r\n\r\nCreate a new project called Network-V4 and copy the src files from *either* your solution to network-v3 *or* our solution of [Network-V3](archives/Network-V3.zip) into it.\r\n  \r\nIn v3, details that we entered via the menu were NOT displayed back to us when we listed all posts.\r\n\r\nThe data is missing because the display method was written in the superclass, Post.  This superclass has no knowledge of its subclasses.  Therefore, it has no knowledge of the message field in MessagePost, or the filename and caption fields in the PhotoPost class. \r\n\r\nTo fix this issue, you need to also write a display method in the subclasses, MessagePost and PhotoPost.  This display method should:\r\n\r\n- override the super class method, display.\r\n- contain a call to the super class method, display.\r\n- append the sub class specific fields to the String returned from the super class call to the display method.\r\n\r\nTest your code again.  Are all details printed to the console?\r\n\r\n\r\n##Solution\r\n\r\nThe solution is available [here](archives/network-solution-v4.zip)\r\n\r\n"
    },
  
    {
    "title": "Exercises",
    "shortTitle": "Exercises",
    "contentMd" : "#Exercises\r\n\r\nThese exercises are based on the exercises in Chapter 8 of Objects First with Java - A Practical Introduction Using Bluej, by David Barnes & Michael Kolling).\r\n\r\n##Exercise 1\r\n\r\nOrder the following items into an inheritance hierarchy : \r\n\r\n- Apple\r\n\r\n- IceCream\r\n\r\n- Bread\r\n\r\n- Fruit\r\n\r\n- FoodItem\r\n\r\n- Cereal\r\n\r\n- Dessert\r\n\r\n- ChocolateMousse\r\n\r\n- Baguette\r\n\r\n\r\n##Exercise 2\r\n\r\nAssume that we have four classes : \r\n\r\n- Person\r\n\r\n- Teacher\r\n\r\n- Student\r\n\r\n- PhDStudent\r\n\r\n\r\nTeacher and Student are both subclasses of Person. PhDStudent is a subclass of Student.\r\n\r\n- Which of the following assignments are legal and why or why not:\r\n\r\n~~~\r\nPerson p1 = new Student(); \r\nPerson p2 = new PhDStudent (); \r\nPhDStudent phd1 = new Student(); \r\nTeacher t1 = new Person(); \r\nStudent s1 = new PhDStudent ();\r\n~~~\r\n\r\n\r\n##Exercise 3\r\n\r\nGiven the Person hierarchy from Exercise 2, suppose that we have the following legal declarations and assignments:\r\n\r\n~~~java\r\nPerson p1 = new Person(); \r\nPerson p2 = new Person (); \r\nPhDStudent phd1 = new PhDStudent(); \r\nTeacher t1 = new Teacher(); \r\nStudent s1 = new Student ();\r\n~~~\r\n\r\n- Based on those just mentioned, which of the following assignments are legal and why or why not?\r\n\r\n~~~\r\ns1 = p1; \r\ns1 = p2; \r\np1 = s1; \r\nt1 = s1; \r\ns1 = phd1; \r\nphd1 = s1;\r\n~~~\r\n\r\n\r\n"
    },
  
    {
    "title": "Solutions",
    "shortTitle": "Solutions",
    "contentMd" : "#Solutions\r\n\r\n\r\n##Exercise 1 Solution\r\n\r\nThe question was...order the following items into an inheritance hierarchy : \r\n\r\n\r\n- apple\r\n\r\n- ice-cream\r\n\r\n- bread\r\n\r\n- fruit\r\n\r\n- food-item\r\n\r\n- cereal\r\n\r\n- dessert\r\n\r\n- chocolate mousse\r\n\r\n- baguette\r\n\r\n\r\nThe answer is:\r\n\r\n![FoodItem Hierarchy](./img/02.png) \r\n\r\n\r\n##Exercise 2\r\n\r\nIn the Person hierarchy, Teacher and Student are both subclasses of Person. PhDStudent is a subclass of Student.\r\n\r\n![Person Hierarchy](./img/03.png) \r\n\r\n~~~java\r\nPerson p1 = new Student();  // This is legal because a Student \"is a\" Person.  \r\n\t\t\t\t\t\t\t// We are following the direction of the arrows in the \r\n\t\t\t\t\t\t\t// inheritance diagram.\r\n~~~\r\n\r\n~~~java\r\nPerson p2 = new PhDStudent (); // This is legal because a PhDStudent \"is a\" Person.\r\n  \t\t\t\t\t\t\t   // We are following the direction of the arrows in the \r\n  \t\t\t\t\t\t\t   // inheritance diagram.\r\n~~~\r\n\r\n~~~java\r\nPhDStudent phd1 = new Student(); // This is NOT legal because a Student \"may not be\" \r\n\t\t\t\t\t\t\t\t // a PhDStudent.  We are going against the direction  \r\n\t\t\t\t\t\t\t\t // of the arrows in the inheritance diagram.\r\n~~~\r\n\r\n~~~java\r\nTeacher t1 = new Person();    // This is NOT legal because a Person \"may not be\" \r\n\t\t\t\t\t\t\t  // a Teacher.  For example, the Person could be a Student.  \r\n\t\t\t\t\t\t\t  // We are going against the arrows in the \r\n\t\t\t\t\t\t\t  // inheritance diagram.\r\n~~~\r\n\r\n~~~java\r\nStudent s1 = new PhDStudent();  //This is legal because a PhDStudent \"is a\" Student.\r\n\t\t\t\t\t\t\t    // We are following the arrows in the inheritance diagram.\r\n~~~\r\n\r\n\r\n##Exercise 3\r\n\r\nGiven the Person hierarchy from Exercise 2:\r\n\r\n![Person Hierarchy](./img/03.png) \r\n\r\n...suppose that we have the following legal declarations and assignments:\r\n\r\n~~~java\r\nPerson p1 = new Person(); \r\nPerson p2 = new Person (); \r\nPhDStudent phd1 = new PhDStudent(); \r\nTeacher t1 = new Teacher(); \r\nStudent s1 = new Student ();\r\n~~~\r\n\r\nBased on these legal variable declarations, which of the following assignments are legal and why or why not?\r\n\r\n~~~java\r\ns1 = p1;    // This is NOT legal...a Person \"may not be\" a Student. \r\n\t\t\t// We are going against the arrows in the inheritance diagram.\r\n~~~\r\n\r\n~~~java\r\ns1 = p2;    // Again, this is NOT legal...a Person \"may not be\" a Student. \r\n\t\t\t// We are going against the arrows in the inheritance diagram.\r\n~~~ \r\n\r\n~~~java\r\np1 = s1;   // This is legal...a Student \"is a\" Person. \r\n  \t\t   // We are following the direction of the arrows in the inheritance diagram.\r\n~~~\r\n\r\n~~~java\r\nt1 = s1;   // This is NOT legal...there is no relationship between a Teacher and a \r\n\t\t   // Student in our inheritance diagram. \r\n~~~\r\n\r\n~~~java\r\ns1 = phd1; // This is legal...a PhDStudent \"is a\" Student. \r\n  \t\t   // We are following the direction of the arrows in the inheritance diagram.\r\n~~~\r\n\r\n~~~java\r\nphd1 = s1;   // However, this is NOT legal...a Student \"may not be\" a PhDStudent. \r\n  \t\t     // We are going against the direction of the arrows in the \r\n  \t\t     // inheritance diagram.\r\n~~~\r\n\r\n"
    }
  
  ]
  }

