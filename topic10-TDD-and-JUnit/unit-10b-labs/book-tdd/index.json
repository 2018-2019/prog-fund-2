


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Lab-10",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>JUnit · Test Classes · Annotations · Automating Tests</p>",
  "folder" : "book-tdd",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "#Objectives",
    "shortTitle": "Lab-10",
    "contentMd" : "#Objectives\r\n\r\nJUnit · Test Classes · Annotations · Automating Tests\r\n"
    },
  
    {
    "title": "#Testing the DVD class",
    "shortTitle": "DVD",
    "contentMd" : "#Testing the DVD class\r\n\r\nIn this step, you will create a JUnit test class for DVD.java. \r\n\r\n\r\n##Creating the New Project\r\n\r\nCreate a new project called DVDLibraryV4.0 in IntelliJ.\r\n\r\nCopy the following classes into the project:\r\n\r\n- [Driver.java](archives/Driver.java)\r\n\r\n- [Library.java](archives/Library.java)\r\n\r\n- [DVD.java](archives/DVD.java)\r\n\r\n\r\nCreate a new *lib* directory and copy this component into it:\r\n\r\n- [xstream-1.4.10.jar](archives/xstream-1.4.10.jar)\r\n\r\nRight click on the new *lib* folder and select the following option from the context menu *Add as library...*.  Click OK.\r\n\r\n\r\n##Creating DVDTest.java\r\n\r\n*Note: you may need to refer to this weeks lecture slides for support here.*\r\n\r\nIn IntelliJ, Create a new directory called **test** and right click on it.  Select the option *Mark Directory as* and select **Test Sources Root**.\r\n\r\nYour current project structure should look like this:\r\n\r\n![](./img/01.png) \r\n\r\nOpen DVD.java. Click above the class declaration, then click on the light bulb…select Create Test:\r\n\r\n![](./img/02.png) \r\n\r\nChoose JUnit5 and Click the *Fix* button:\r\n\r\n![](./img/03.png) \r\n\r\n...and click the OK button do download JUnit5 from Maven:\r\n\r\n![](./img/04.png) \r\n\r\nNow that JUnit5 is downloaded…select the checkboxes as shown to generate test methods.  Note the class name is set to DVDTest:\r\n\r\n![](./img/05.png) \r\n\r\nDVDTest.java is generated with starting code.  However, there is an error on the toString() method…to get rid of this, just rename it e.g. *testToString()*: \r\n\r\n![](./img/06.png) \r\n\r\n\r\n##Updating DVDTest.java\r\n\r\nAdd four DVD objects and instantiate the first three with titles 19, 20 and 21 characters long (boundary test). Use the default constructor to instantiate the fourth.  \r\n\r\n~~~java\r\n     private DVD dvd1, dvd2, dvd3, dvd4;\r\n\r\n    @BeforeEach\r\n    void setUp() {\r\n        dvd1 = new DVD(\"The Hobbit(Director)\");  //title with 20 characters\r\n        dvd2 = new DVD(\"The Steve Jobs Film\");   //title with 19 characters\r\n        dvd3 = new DVD(\"Avatar: Directors Cut\"); //title with 21 characters\r\n        dvd4 = new DVD();\r\n    }\r\n\r\n    @AfterEach\r\n    void tearDown() {\r\n        dvd1 = dvd2 = dvd3 = dvd4 = null;\r\n    }\r\n~~~\r\n\r\nUse IntelliJ's *ALT+Enter* facility to import the correct Annotation libraries for @BeforeEach and @AfterEach. \r\n\r\nRefactor the *getTitle* like so:\r\n\r\n~~~java\r\n    @Test\r\n    void getTitle() {\r\n        assertEquals(\"The Hobbit(Director)\", dvd1.getTitle());\r\n        assertEquals(\"The Steve Jobs Film\", dvd2.getTitle());\r\n        assertEquals(\"Avatar: Directors Cu\", dvd3.getTitle());\r\n        assertEquals(null, dvd4.getTitle());\r\n    }\r\n~~~\r\n\r\nReferring to your lecture slides for support, complete/write the following two tests:\r\n\r\n- testSetTitle()\r\n- testToString()\r\n\r\n\r\nAre all your tests passing?  If so, move onto the next step, otherwise revisit the tests and fix them.\r\n\r\n\r\n##Solution for DVDTest.java\r\n\r\n- [DVDTest.java](archives/DVDTest.java)\r\n\r\n\r\n"
    },
  
    {
    "title": "#Testing the Library class",
    "shortTitle": "Library",
    "contentMd" : "#Testing the Library class\r\n\r\nIn this practical, you will create a test class for Library.java (which will also test the XML loading and storing). \r\n\r\n\r\n##Creating LibraryTest.java\r\n\r\n*In this section, you may need to refer to your lecture slides for support (i.e. the fifth slide deck).*\r\n\r\nWithin your DVDLibrary4.0 project, open Library.java.  Click above the **public class Library** declaration and when the light bulb appears, click on it and select **Create Test**.  Choose to generate the following methods:\r\n\r\n![](./img/07.png) \r\n\r\nThe following code will be generated:\r\n\r\n~~~java\r\nimport org.junit.jupiter.api.AfterEach;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\nclass LibraryTest {\r\n\r\n    @BeforeEach\r\n    void setUp() {\r\n    }\r\n\r\n    @AfterEach\r\n    void tearDown() {\r\n    }\r\n\r\n    @Test\r\n    void add() {\r\n    }\r\n\r\n    @Test\r\n    void getDVDs() {\r\n    }\r\n\r\n    @Test\r\n    void setDVDs() {\r\n    }\r\n\r\n    @Test\r\n    void listDVDs() {\r\n    }\r\n\r\n    @Test\r\n    void load() {\r\n    }\r\n\r\n    @Test\r\n    void save() {\r\n    }\r\n}\r\n~~~\r\n\r\n\r\n##Refactoring the test method: add\r\n\r\nAdd an instance field to LibraryTest:\r\n\r\n~~~java\r\n    private Library library;\r\n~~~\r\n\r\nThen update the setUp and tearDown methods with this code:\r\n\r\n~~~java\r\n    @BeforeEach\r\n    void setUp() {\r\n        library = new Library();\r\n    }\r\n\r\n    @AfterEach\r\n    void tearDown() {\r\n        library = null;\r\n    }\r\n~~~\r\n\r\nNow refactor the test *add* method:\r\n\r\n~~~java\r\n    @Test\r\n    void add() {\r\n\r\n        //Testing the ArrayList is Empty\r\n        assertEquals(0, library.getDVDs().size());\r\n\r\n        //Testing the adding of the first dvd and making sure the title\r\n        //was setup correctly.\r\n        library.add(new DVD(\"The Avengers\"));\r\n        assertEquals(1, library.getDVDs().size());\r\n        assertEquals(\"The Avengers\", library.getDVDs().get(0).getTitle());\r\n\r\n        //Testing the adding of a second dvd\r\n        library.add(new DVD(\"Peppa Pig\"));\r\n        assertEquals(2, library.getDVDs().size());\r\n        assertEquals(\"Peppa Pig\", library.getDVDs().get(1).getTitle());\r\n    }\r\n~~~\r\n\r\nRun this test...if it is passing, move onto the next test method.  If it isn't passing, then return to your code and test to figure out where the issue is.\r\n\r\n\r\n##Refactoring the test methods: getDVDs \r\n\r\nUpdate the instance fields in LibraryTest to the following:\r\n\r\n~~~java\r\n    private Library library, populatedLibrary;\r\n    private DVD dvd1, dvd2, dvd3;\r\n    private ArrayList<DVD> emptyDVDs, populatedDVDs;    \r\n~~~\r\n\r\nUse IntelliJ's *ALT+Enter* to import the ArrayList class.\r\n\r\nRefactor the setUp method to be (note that the comments explain what each object is used for):\r\n\r\n~~~java\r\n    @BeforeEach\r\n    void setUp() {\r\n        //A Library object that will be empty at the beginning of each test\r\n        library = new Library();\r\n\r\n        //An empty ArrayList of DVDs created independently of the Library class.\r\n        //This will be used to compare with the ArrayList created in Library.\r\n        emptyDVDs = new ArrayList<DVD>();\r\n\r\n        //A populated ArrayList of DVDs created independently of the Library class.\r\n        //This will be used to compare with the ArrayList created in Library.\r\n        populatedDVDs = new ArrayList<DVD>();\r\n        dvd1 = new DVD(\"The Hobbit(Director)\");  //title with 20 characters\r\n        dvd2 = new DVD(\"The Steve Jobs Film\");   //title with 19 characters\r\n        dvd3 = new DVD(\"Avatar: Directors Cut\"); //title with 21 characters\r\n        populatedDVDs.add(dvd1);\r\n        populatedDVDs.add(dvd2);\r\n        populatedDVDs.add(dvd3);\r\n\r\n        //A Library object that will be populated with three DVDs at the beginning of each test\r\n        populatedLibrary = new Library();\r\n        populatedLibrary.setDVDs(populatedDVDs);\r\n    }\r\n~~~\r\n\r\nAnd the tearDown method to this:\r\n\r\n~~~java\r\n    @AfterEach\r\n    void tearDown() {\r\n        library = populatedLibrary = null;\r\n        dvd1 = dvd2 = dvd3 = null;\r\n        populatedDVDs = emptyDVDs = null;\r\n    }\r\n~~~\r\n\r\nNow update the getDVDs method:\r\n\r\n~~~java\r\n    @Test\r\n    void getDVDs() {\r\n        //The new library object size is zero\r\n        assertEquals(0, library.getDVDs().size());\r\n        //The new library object returns an empty ArrayList of DVDs\r\n        assertEquals(emptyDVDs, library.getDVDs());\r\n\r\n        //The populated library object size is three DVDs\r\n        assertEquals(3, populatedLibrary.getDVDs().size());\r\n        //The populated library object returns an ArrayList with three DVDs\r\n        assertEquals(populatedDVDs, populatedLibrary.getDVDs());\r\n    }\r\n~~~\r\n\r\nRun all tests in this test class...if they are passing, move onto the next test method.  If they aren't passing, then return to your code and test to figure out where the issue is.\r\n\r\n\r\n##Refactoring the test methods: setDVDs \r\n\r\nAbove, we set up all the test data we need for testing setDVDs().\r\n\r\nUpdate the setDVDs method with the following code:\r\n\r\n~~~java\r\n    @Test\r\n    void setDVDs() {\r\n        //The new library object size is zero.  Set the DVDs\r\n        //ArrayList to an empty list; zero should still be returned\r\n        assertEquals(0, library.getDVDs().size());\r\n        library.setDVDs(emptyDVDs);\r\n        assertEquals(0, library.getDVDs().size());\r\n\r\n        //Now set the DVDs ArrayList with the populatedDVDs.\r\n        //3 should still be returned\r\n        library.setDVDs(populatedDVDs);\r\n        assertEquals(3, library.getDVDs().size());\r\n        //The contents of the library DVDs should also be the\r\n        //same as the populatedDVDs.\r\n        assertEquals(populatedDVDs, library.getDVDs());\r\n    }\r\n~~~\r\n\r\nAre all your tests running successfully?  If so, move onto the next test, otherwise revisit the tests and fix them.\r\n\r\n\r\n##Refactoring the test methods: listDVDs()\r\n\r\nAbove, we set up all the test data we need for testing listDVDs().\r\n\r\nUpdate the listDVDs method with the following code:\r\n\r\n~~~java\r\n    @Test\r\n    void listDVDs() {\r\n        //The new library object returns an empty String\r\n        assertEquals(\"No DVDs.\", library.listDVDs());\r\n\r\n        //The populated library object returns an String listing three DVDs\r\n        assertEquals(\"0:DVD Title is: The Hobbit(Director)\\n\"\r\n                        + \"1:DVD Title is: The Steve Jobs Film\\n\"\r\n                        + \"2:DVD Title is: Avatar: Directors Cu\\n\",\r\n                populatedLibrary.listDVDs());\r\n    }\r\n~~~\r\n\r\nAre all your tests running successfully?  If so, move onto the next test, otherwise revisit the tests and fix them.\r\n\r\n\r\n##Refactoring the save and load test methods\r\n\r\nAbove, we set up all the test data we need for testing XML persistence\r\n\r\nDelete the two generated methods: load() and save(); we are going to do the persistence testing in one method.\r\n\r\nAdd the following method to your LibraryTest.java method:\r\n\r\n~~~java\r\n    @Test\r\n    public void testSaveAndLoad() throws Exception\r\n    {\r\n        //TESTING AN EMPTY ARRAYLIST\r\n        //--------------------------\r\n        //Saving a new library object with an empty ArrayList of DVD\r\n        assertEquals(0, library.getDVDs().size());\r\n        assertEquals(emptyDVDs, library.getDVDs());\r\n        library.save();\r\n        //Load the file into another library object and compare it to emptyDVDs\r\n        Library library2 = new Library();\r\n        library2.load();\r\n        assertEquals(library2.getDVDs().size(), library.getDVDs().size());\r\n\r\n        //TESTING A POPULATED ARRAYLIST\r\n        //-----------------------------\r\n        //Saving a library object with a populated ArrayList of DVD\r\n        assertEquals(3, populatedLibrary.getDVDs().size());\r\n        assertEquals(populatedDVDs, populatedLibrary.getDVDs());\r\n        populatedLibrary.save();\r\n        //Load the file into another library object and compare it to populatedLibrary\r\n        Library library3 = new Library();\r\n        library3.load();\r\n        assertEquals(library3.getDVDs().size(), populatedLibrary.getDVDs().size());\r\n        assertEquals(library3.getDVDs().get(1).getTitle(), populatedLibrary.getDVDs().get(1).getTitle());\r\n        assertEquals(library3.getDVDs().get(2).getTitle(), populatedLibrary.getDVDs().get(2).getTitle());\r\n    }\r\n~~~\r\n\r\nAre all your tests running successfully?  If not,  revisit the tests and fix them.\r\n\r\n\r\n##Solution for LibraryTest.java\r\n\r\n- [LibraryTest.java](archives/LibraryTest.java)\r\n\r\n"
    },
  
    {
    "title": "#Test Largest",
    "shortTitle": "TestLargest",
    "contentMd" : "#Test Largest\r\n\r\nIn lecture 4 of this topic, we covered testing a static method called TestLargest.  We had some errors in the code and we watched how we could pick up these errors using best-practice Test Driven Development practices and approaches. \r\n\r\nDownload the TestLargest code from [here](archives/TestLargest.zip) and experiment with generating these errors and the effect they have on the JUnit tests.\r\n\r\n"
    },
  
    {
    "title": "#Solutions",
    "shortTitle": "Solution",
    "contentMd" : "#Solutions\r\n\r\nThe solution to DVDLibrary4.0 can be found [here](archives/DVDLibraryV4.0.zip).\r\n\r\n\r\n"
    }
  
  ]
  }

